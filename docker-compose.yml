version: '3.8'

services:
  # API service
  api:
    build:
      context: .
      dockerfile: ./docker/Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      - postgres
      - redis
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/team_polls
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your_secret_key_here_change_in_production
      - RATE_LIMIT_WINDOW_MS=60000
      - RATE_LIMIT_MAX=300
      - JWT_EXPIRY=1h
    restart: unless-stopped
    networks:
      - team_polls_network
    volumes:
      - ./logs:/app/logs

  # For scaling demo (uncomment to activate)
  # api2:
  #   build:
  #     context: .
  #     dockerfile: ./docker/Dockerfile
  #   depends_on:
  #     - postgres
  #     - redis
  #   environment:
  #     - NODE_ENV=production
  #     - PORT=3000
  #     - DATABASE_URL=postgres://postgres:postgres@postgres:5432/team_polls
  #     - REDIS_URL=redis://redis:6379
  #     - JWT_SECRET=your_secret_key_here_change_in_production
  #     - RATE_LIMIT_WINDOW_MS=60000
  #     - RATE_LIMIT_MAX=300
  #     - JWT_EXPIRY=1h
  #   restart: unless-stopped
  #   networks:
  #     - team_polls_network
  
  # Load balancer for scaling demo (uncomment with api2)
  # nginx:
  #   image: nginx:alpine
  #   ports:
  #     - "8080:80"
  #   volumes:
  #     - ./docker/nginx.conf:/etc/nginx/conf.d/default.conf
  #   depends_on:
  #     - api
  #     - api2
  #   networks:
  #     - team_polls_network

  # PostgreSQL database
  postgres:
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=team_polls
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    networks:
      - team_polls_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis for caching and pub/sub
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redisdata:/data
    networks:
      - team_polls_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

networks:
  team_polls_network:
    driver: bridge

volumes:
  pgdata:
  redisdata: