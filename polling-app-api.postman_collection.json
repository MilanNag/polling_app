{
  "info": {
    "name": "Polling Application API",
    "description": "API documentation for the Interactive Polling Application",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "12345678"
  },
  "item": [
    {
      "name": "Polls",
      "description": "Endpoints for managing polls",
      "item": [
        {
          "name": "Get Active Polls",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/polls/active",
              "host": ["{{base_url}}"],
              "path": ["api", "polls", "active"]
            },
            "description": "Get all active polls in the system"
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/api/polls/active",
                  "host": ["{{base_url}}"],
                  "path": ["api", "polls", "active"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "[\n  {\n    \"id\": 1,\n    \"question\": \"What is your favorite programming language?\",\n    \"description\": \"Vote for your preferred language\",\n    \"userId\": \"user_123\",\n    \"isActive\": true,\n    \"createdAt\": \"2023-05-11T15:30:00.000Z\",\n    \"updatedAt\": \"2023-05-11T15:30:00.000Z\",\n    \"isRemoved\": false,\n    \"options\": [\n      {\n        \"id\": 1,\n        \"pollId\": 1,\n        \"text\": \"JavaScript\",\n        \"voteCount\": 15\n      },\n      {\n        \"id\": 2,\n        \"pollId\": 1,\n        \"text\": \"Python\",\n        \"voteCount\": 20\n      },\n      {\n        \"id\": 3,\n        \"pollId\": 1,\n        \"text\": \"Java\",\n        \"voteCount\": 8\n      },\n      {\n        \"id\": 4,\n        \"pollId\": 1,\n        \"text\": \"C#\",\n        \"voteCount\": 10\n      }\n    ],\n    \"totalVotes\": 53\n  }\n]"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(Array.isArray(jsonData)).to.be.true;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Closed Polls",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/polls/closed",
              "host": ["{{base_url}}"],
              "path": ["api", "polls", "closed"]
            },
            "description": "Get all closed (inactive) polls in the system"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(Array.isArray(jsonData)).to.be.true;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Poll Details",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/polls/1",
              "host": ["{{base_url}}"],
              "path": ["api", "polls", "1"]
            },
            "description": "Get detailed information about a specific poll by ID"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has poll details\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('question');",
                  "    pm.expect(jsonData).to.have.property('options');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create New Poll",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"question\": \"What's your favorite movie genre?\",\n  \"description\": \"Vote for your preferred movie genre\",\n  \"userId\": \"user_123\",\n  \"options\": [\n    \"Action\",\n    \"Comedy\",\n    \"Drama\",\n    \"Science Fiction\",\n    \"Horror\"\n  ]\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/polls",
              "host": ["{{base_url}}"],
              "path": ["api", "polls"]
            },
            "description": "Create a new poll with options"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has new poll ID\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Vote on Poll",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"user_123\",\n  \"optionId\": 2\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/polls/1/vote",
              "host": ["{{base_url}}"],
              "path": ["api", "polls", "1", "vote"]
            },
            "description": "Submit a vote for a specific option on a poll"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Vote was registered\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success').eql(true);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Poll Status",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"user_123\",\n  \"isActive\": false\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/polls/1/status",
              "host": ["{{base_url}}"],
              "path": ["api", "polls", "1", "status"]
            },
            "description": "Change poll status (active/inactive)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Poll status updated\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success').eql(true);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Poll",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/polls/1?userId=user_123",
              "host": ["{{base_url}}"],
              "path": ["api", "polls", "1"],
              "query": [
                {
                  "key": "userId",
                  "value": "user_123"
                }
              ]
            },
            "description": "Delete a poll (soft delete)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Poll was deleted\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success').eql(true);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Users",
      "description": "Endpoints for managing users and authentication",
      "item": [
        {
          "name": "Get User Stats",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/users/user_123/stats",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "user_123", "stats"]
            },
            "description": "Get statistics for a specific user including badges"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has user stats\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('userId');",
                  "    pm.expect(jsonData).to.have.property('pollsCreated');",
                  "    pm.expect(jsonData).to.have.property('votesSubmitted');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"newuser\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/users",
              "host": ["{{base_url}}"],
              "path": ["api", "users"]
            },
            "description": "Create a new user"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has user ID\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('userId');",
                  "    pm.expect(jsonData).to.have.property('username');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Current User",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/auth/user",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "user"]
            },
            "description": "Get the current authenticated user information"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has user info\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('userId');",
                  "    pm.expect(jsonData).to.have.property('username');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"existinguser\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "login"]
            },
            "description": "Login with an existing username or create a new user"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Login successful\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success').eql(true);",
                  "    pm.expect(jsonData).to.have.property('user');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Logout",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/auth/logout",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "logout"]
            },
            "description": "Log out the current user"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Logout successful\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success').eql(true);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ],
  "event": [],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:5000",
      "type": "string"
    }
  ]
}